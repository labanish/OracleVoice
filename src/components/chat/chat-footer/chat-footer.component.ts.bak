/**
 * CopyrightÂ© 2017, Oracle and/or its affiliates. All rights reserved.
 */
import {Component} from "../../component";
import {IconButtonComponent} from "../../shared/icon-button/icon-button.component";
import {FooterComponent} from "../../shared/footer/footer.component";
import {Utils} from "../../../core/utils";

/**
 * Chat footer component creates the message input and the send button elements for the footer of the chat window
 *  <Footer>
 *      <input class="input">
 *      <IconButton>
 *  </Footer>
 */


export class ChatFooterComponent extends Component {
    input: HTMLInputElement;

    constructor(utils: Utils, private onSend: Function, private sendButtonImgSrc: string, private inputPlaceholder: string) {
        super(utils);
		this.element = this._createElement();
		window.onkeypress = (ev: KeyboardEvent) => {
			console.log("onkeypress:" + ev.key);
			if(ev.key === '`') {
				startButton(null, (input)=> {this.onSend(input)
				})
			}
		}
    }

    render(element: any): void {
		element.appendChild(this.element);
    }

    protected _createElement(): HTMLElement {
        this.input = this.utils.createInput(['input']);
        this.input.onkeypress = this.onInputKeyPress.bind(this);
        this.input.placeholder = this.inputPlaceholder;
        let sendButton = new IconButtonComponent(this.utils, this.onClick.bind(this), this.sendButtonImgSrc);
        let footer = new FooterComponent(this.utils);
        footer.appendContentChildElement(this.input);
        footer.appendContentChild(sendButton);
        return footer.element;
    }

	

    onInputKeyPress(event) {
        if (event.key === 'Enter' && this.input.value !== '') {
			this._onSend();
		}
        // } if (event.key === 'w'){
		// 	startButton(null, (input)=> {this.onSend(input)
		// 	})
		// }
		//console.log(event.key)
    }

    onClick() {
        startButton(null, (input)=> {
            //alert(input)
        this.onSend(input)
        })
/*         if (this.input.value !== '') {
            this._onSend();
        } */
    }

    _onSend() {
        this.onSend(this.input.value);
        this.input.value = '';
    }
}

var wind: any = Window
var callback = null
var start_timestamp;
var ignore_onend;
var final_transcript = '';
var recognizing = false;
var s_recognition = null;
var startRecoTime = 0;
var first_char = /\S/;
var started = false;
wind.recording = false;
wind.audioContext = null;//new AudioContext();
var BUFF_SIZE = 16384;
var audioInput = null;
var processor = null;
var microphoneStream = null;
var gain = null;
var connection = null;
var host = "wss://speech-demo.data.digitalassistant.oci.oc-test.com/v1/stream/recognize?culture=en-us&domain=generic&version=201907240000&partial=true&encoding=audio%2Fraw%3Brate%3D16000%3Bcoding%3Dlinear%3Bbyteorder%3DLE";
var token = null;
var maxConnectionRetryCount = 5;
var connectionRetry = 0;
var connectionError = false;

// update the variable due to browser differences
    if (!navigator.getUserMedia)
	{
		navigator.getUserMedia = navigator.getUserMedia //|| navigator.webkitGetUserMedia || navigator.mozGetUserMedia || navigator.msGetUserMedia;
    }

	function connectToWebSocket() 
    {
        console.log("connecting to '" + host + "'");
        //document.cookie = "x-vbt-culture: en-us";
        connection = new WebSocket(host);
        connection.onopen = connection_onopen;
        connection.onmessage = connection_onmessage;
        connection.onclose = connection_onclose;
        connection.onerror = connection_error;
    }

	function connection_onopen()
	{
		console.log("connection to '"+ host+"' open");
		connectionError = false;
		if (navigator.getUserMedia == null)
		{
			//start_img.src = '/images/mic-slash.gif';
		}
		//else 
		//{
		//	start_img.src = '/images/mic.gif';
		//}
	}

	function connection_onclose(event)
	{
		console.log("connection to '"+ host+"' closed: " + event);
		//if (!connectionError)
		//{
		//	// reopen the connection
		//	connectToWebSocket();
		//}
	}

    function connection_onmessage(message)
	{
		console.log("message received: '"+ message.data +"'");
		var data = data = JSON.parse(message.data);
		if ((data != null) && (data['nbest'] != null) && (data.event === 'finalResult'))
		{
			var input = data['nbest'][0]['utterance'];
			// close the connection
			//connection.close();
			if (input != null)
			{
                //alert(input);
                callback(input) 
				//sendQuery(input);
			}
		} else if ((data != null) && (data['nbest'] != null) && (data.event === 'partialResult')){
			// this.inputPlaceholder = data['nbest'][0]['utterance']
			// console.log(this.inputPlaceholder)
			console.log(data['nbest'][0]['utterance']);
			this.input.value = data['nbest'][0]['utterance'];
		}
	}

	function connection_error()
	{
		console.log("error connecting to '"+ host+"'");
		//start_img.src = '/images/mic-slash.gif';
		connectionError = true;
	}

	function downsampleBuffer(buffer, sampleRate, outSampleRate) 
	{
		if (outSampleRate === sampleRate) 
		{
		  return buffer;
		}
		if (outSampleRate > sampleRate) 
		{
		  throw new Error('downsampling rate show be smaller than original sample rate');
		}

		const sampleRateRatio = sampleRate / outSampleRate;
		const newLength = Math.round(buffer.length / sampleRateRatio);
		const result = new Int16Array(newLength);
		let offsetResult = 0;
		let offsetBuffer = 0;
		
		while (offsetResult < result.length) 
		{
		  const nextOffsetBuffer = Math.round((offsetResult + 1) * sampleRateRatio);
		  let accum = 0;
		  let count = 0;
		  for (let i = offsetBuffer; i < nextOffsetBuffer && i < buffer.length; i++) 
		  {
			accum += buffer[i];
			count++;
		  }
		  result[offsetResult] = Math.min(1, accum / count) * 0x7FFF;
		  offsetResult++;
		  offsetBuffer = nextOffsetBuffer;
		}
		return result.buffer;
	}

    function processAudioBuffer(event) 
	{ 
		//if (wind.recording)
		//{
			// invoked by event loop
			var samples = event.inputBuffer.getChannelData(0); // just mono 
			//console.log(wind.audioContext.sampleRate);
			const outBuffer = downsampleBuffer(samples, event.inputBuffer.sampleRate, 16000);
			if (connection.readyState == 1)
			{
				connection.send(outBuffer);
			}
		//}
		//console.log(wind.recording);
    }

	function stopMicrophone()
	{
		if (connection.readyState === 1) 
		{
			console.log("sending done to asr service");
			connection.send('Done');
		}
		console.log("stopping microphone");
		microphoneStream.mediaStream.getAudioTracks().forEach(track => 
		{
			track.stop();
			microphoneStream.mediaStream.removeTrack(track);
		});
		wind.audioContext.close();
		
		wind.audioContext = null;
		started = false;
		//start_img.src = '/images/mic.gif';
	}

    function startMicrophone(stream)
	{
		connectToWebSocket();

		console.log("starting microphone");
		wind.audioContext = new AudioContext();
		// create the stream
		microphoneStream = wind.audioContext.createMediaStreamSource(stream);
		// create the audio processor with the given buffer size
		processor = wind.audioContext.createScriptProcessor(BUFF_SIZE,1,1);
		// handle onaudioprocess events
		processor.onaudioprocess = processAudioBuffer; 
		// connect the stream to the processor
		microphoneStream.connect(processor);
		// connect the processor to the audioContext destination
		processor.connect(wind.audioContext.destination);
		startVAD(microphoneStream, true);
		started = true;
		//start_img.src = '/images/mic-animate.gif';
	}

	function startVAD(s, debug)
	{
        var localVars: any = {}
		localVars.source = s;
		localVars.context = localVars.source.context;
		localVars.fftSize = 512;
		localVars.bufferLen = 512;
		localVars.smoothingTimeConstant = 0.99;
        localVars.energy_offset= 1e-8; // The initial offset.
        localVars.energy_threshold_ratio_pos = 2; // Signal must be twice the offset
        localVars.energy_threshold_ratio_neg =  0.8; // Signal must be half the offset
        localVars.energy_integration = 1; // Size of integration change compared to the signal per second.
        localVars.filter = [
                { f: 200, v: 0 }, // 0 -> 200 is 0
                { f: 2000, v: 1 } // 200 -> 2k is 1
            ];
		localVars.hertzPerBin = localVars.context.sampleRate / localVars.fftSize;
        localVars.iterationFrequency = localVars.context.sampleRate / localVars.bufferLen;
        localVars.iterationPeriod = 1 / localVars.iterationFrequency;
		
		if (debug) console.log(
            'Vad' +
            ' | sampleRate: ' + localVars.context.sampleRate +
            ' | hertzPerBin: ' + localVars.hertzPerBin +
            ' | iterationFrequency: ' + localVars.iterationFrequency +
            ' | iterationPeriod: ' + localVars.iterationPeriod
        );

		localVars.setFilter = function (shape) {
            localVars.filter = [];
            for (var i = 0, iLen = localVars.fftSize / 2; i < iLen; i++) {
                localVars.filter[i] = 0;
                for (var j = 0, jLen = shape.length; j < jLen; j++) {
                    if (i * localVars.hertzPerBin < shape[j].f) {
                        localVars.filter[i] = shape[j].v;
                        break; // Exit j loop
                    }
                }
            }
        }

        localVars.setFilter(localVars.filter);
		localVars.ready = {};
		localVars.vadState = false; // True when Voice Activity Detected

		localVars.energy_threshold_pos = localVars.energy_offset * localVars.energy_threshold_ratio_pos;
        localVars.energy_threshold_neg = localVars.energy_offset * localVars.energy_threshold_ratio_neg;

		localVars.voiceTrend = 0;
        localVars.voiceTrendMax = 10;
        localVars.voiceTrendMin = -10;
        localVars.voiceTrendStart = 5;
        localVars.voiceTrendEnd = -5;

		localVars.analyser = localVars.context.createAnalyser();
        localVars.analyser.smoothingTimeConstant = localVars.smoothingTimeConstant; // 0.99;
        localVars.analyser.fftSize = localVars.fftSize;

		localVars.floatFrequencyData = new Float32Array(localVars.analyser.frequencyBinCount);

        // Setup local storage of the Linear FFT data
        localVars.floatFrequencyDataLinear = new Float32Array(localVars.floatFrequencyData.length);

        // Connect this.analyser
        localVars.source.connect(localVars.analyser);

        // Create ScriptProcessorNode
        localVars.scriptProcessorNode = localVars.context.createScriptProcessor(localVars.bufferLen, 1, 1);

        // Connect scriptProcessorNode (Theretically, not required)
        localVars.scriptProcessorNode.connect(localVars.context.destination);

		// Create callback to update/analyze floatFrequencyData
        var self = localVars;
        localVars.scriptProcessorNode.onaudioprocess = function (event) {
            self.analyser.getFloatFrequencyData(self.floatFrequencyData);
            self.update();
            self.monitor();
        };

		// Connect scriptProcessorNode
        localVars.source.connect(localVars.scriptProcessorNode);

		localVars.update = function () {
			// Update the local version of the Linear FFT
            var fft = localVars.floatFrequencyData;
            for (var i = 0, iLen = fft.length; i < iLen; i++) {
                localVars.floatFrequencyDataLinear[i] = Math.pow(10, fft[i] / 10);
            }
            localVars.ready = {};
        }

        localVars.getEnergy = function () {
            if (localVars.ready.energy) {
                return localVars.energy;
            }

            var energy = 0;
            var fft = localVars.floatFrequencyDataLinear;

            for (var i = 0, iLen = fft.length; i < iLen; i++) {
                energy += localVars.filter[i] * fft[i] * fft[i];
            }

            localVars.energy = energy;
            localVars.ready.energy = true;

            return energy;
        }

        localVars.disconnect = function () {
            localVars.source.disconnect(localVars.scriptProcessorNode);
            localVars.source.disconnect(localVars.analyser);
            localVars.scriptProcessorNode.disconnect(localVars.context.destination);
        }

        localVars.monitor = function () {
            var energy = localVars.getEnergy();
            var signal = energy - localVars.energy_offset;

            if (signal > localVars.energy_threshold_pos) {
                localVars.voiceTrend = (localVars.voiceTrend + 1 > localVars.voiceTrendMax) ? localVars.voiceTrendMax : localVars.voiceTrend + 1;
            } else if (signal < -localVars.energy_threshold_neg) {
                localVars.voiceTrend = (localVars.voiceTrend - 1 < localVars.voiceTrendMin) ? localVars.voiceTrendMin : localVars.voiceTrend - 1;
            } else {
                // voiceTrend gets smaller
                if (localVars.voiceTrend > 0) {
                    localVars.voiceTrend--;
                } else if (localVars.voiceTrend < 0) {
                    localVars.voiceTrend++;
                }
            }

            var start = false, end = false;
            if (localVars.voiceTrend > localVars.voiceTrendStart) {
                // Start of speech detected
                start = true;
            } else if (localVars.voiceTrend < localVars.voiceTrendEnd) {
                // End of speech detected
                end = true;
            }

            // Integration brings in the real-time aspect through the relationship with the frequency this functions is called.
            var integration = signal * localVars.iterationPeriod * localVars.energy_integration;

            // Idea?: The integration is affected by the voiceTrend magnitude? - Not sure. Not doing atm.

            // The !end limits the offset delta boost till after the end is detected.
            if (integration > 0 || !end) {
                localVars.energy_offset += integration;
            } else {
                localVars.energy_offset += integration * 10;
            }
            localVars.energy_offset = localVars.energy_offset < 0 ? 0 : localVars.energy_offset;
            localVars.energy_threshold_pos = localVars.energy_offset * localVars.energy_threshold_ratio_pos;
            localVars.energy_threshold_neg = localVars.energy_offset * localVars.energy_threshold_ratio_neg;

            // Broadcast the messages
            if (start && !localVars.vadState) {
                localVars.vadState = true;
                //this.options.voice_start();
				console.log("start");
				wind.recording = true;
            }
            if (end && localVars.vadState) {
                localVars.vadState = false;
                //this.options.voice_stop();
				stopMicrophone();
				console.log("stop");
            }

            return signal;
        }
	}

	function startButton(event, cb) 
	{
        callback = cb
		if (navigator.getUserMedia)
		{
			if (started)
			{
				stopMicrophone();
			}
			else 
			{
				navigator.getUserMedia({audio:true}, 
					function(stream) {
					startMicrophone(stream);
					},
					function(e) 
					{
					alert('Error capturing audio.');
					}
				);
			}
		}
		else 
		{ 
			//start_img.src = '/images/mic-slash.gif';
			alert('getUserMedia not supported in this browser.'); 
		}
	}

	function capitalize(s) {
		return s.replace(first_char, function (m) { return m.toUpperCase(); });
	}

	
	function submitUtterance() {
        //sendQuery($('#data').val());
        alert("result")
/* 		$('#data').val('');
		$('#logicaldiv').html("&nbsp;");
		$('#parsediv').html("&nbsp;"); */
	}